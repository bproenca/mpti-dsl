/*
 * generated by Xtext 2.26.0.M2
 */
package br.edu.ufrn.myhtml.tests

import br.edu.ufrn.myhtml.htmlModel.MyHtmlModel
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import br.edu.ufrn.myhtml.htmlModel.HtmlModelPackage
import br.edu.ufrn.myhtml.validation.HtmlModelValidator
import org.eclipse.xtext.xbase.testing.CompilationTestHelper

@ExtendWith(InjectionExtension)
@InjectWith(HtmlModelInjectorProvider)
class HtmlModelParsingTest {
	@Inject ParseHelper<MyHtmlModel> parseHelper
	@Inject ValidationTestHelper validationTestHelper
	@Inject extension CompilationTestHelper

	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			Article{Section(title="Titulo"){}}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def testValidModel() {
		val entity = parseHelper.parse('''
			Article{Section(title="Titulo"){}}
		''')
		validationTestHelper.assertNoIssues(entity)
	}

	@Test
	def testNameStartsWithCapitalWarning() {
		val entity = parseHelper.parse('''
			Article{Section(title="titulo"){}}
		''')
		validationTestHelper.assertWarning(
			entity,
			HtmlModelPackage.Literals.SECTION,
			HtmlModelValidator.INVALID_NAME, "Nome deve começar com letra maiúscula"
		)
	}

	@Test 
	def testCompilationResult() {
		'''
			Article{
				Section(title="Titulo"){
					
				}
			}
		'''.assertCompilesTo('''
			<!DOCTYPE html>
			<html>
			  <head>
			    <title>My Web Page</title>
			  </head>
			  <body>
			<h1> Titulo </h1>
			
			  </body>
			</html>
		''')
	}
}
