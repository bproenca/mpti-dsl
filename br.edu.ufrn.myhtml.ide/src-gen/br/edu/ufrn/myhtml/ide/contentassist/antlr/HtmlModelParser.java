/*
 * generated by Xtext 2.26.0.M2
 */
package br.edu.ufrn.myhtml.ide.contentassist.antlr;

import br.edu.ufrn.myhtml.ide.contentassist.antlr.internal.InternalHtmlModelParser;
import br.edu.ufrn.myhtml.services.HtmlModelGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class HtmlModelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HtmlModelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HtmlModelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBasicColorsAccess().getAlternatives(), "rule__BasicColors__Alternatives");
			builder.put(grammarAccess.getArticleAccess().getGroup(), "rule__Article__Group__0");
			builder.put(grammarAccess.getSectionAccess().getGroup(), "rule__Section__Group__0");
			builder.put(grammarAccess.getSectionAccess().getGroup_5(), "rule__Section__Group_5__0");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
			builder.put(grammarAccess.getRowAccess().getGroup(), "rule__Row__Group__0");
			builder.put(grammarAccess.getParagraphAccess().getGroup(), "rule__Paragraph__Group__0");
			builder.put(grammarAccess.getParagraphAccess().getGroup_1(), "rule__Paragraph__Group_1__0");
			builder.put(grammarAccess.getReferencesAccess().getGroup(), "rule__References__Group__0");
			builder.put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
			builder.put(grammarAccess.getLinkAccess().getGroup_1(), "rule__Link__Group_1__0");
			builder.put(grammarAccess.getMyHtmlModelAccess().getArticleAssignment(), "rule__MyHtmlModel__ArticleAssignment");
			builder.put(grammarAccess.getArticleAccess().getSectionsAssignment_3(), "rule__Article__SectionsAssignment_3");
			builder.put(grammarAccess.getArticleAccess().getReferencesAssignment_4(), "rule__Article__ReferencesAssignment_4");
			builder.put(grammarAccess.getSectionAccess().getTitleAssignment_4(), "rule__Section__TitleAssignment_4");
			builder.put(grammarAccess.getSectionAccess().getSizeAssignment_5_3(), "rule__Section__SizeAssignment_5_3");
			builder.put(grammarAccess.getSectionAccess().getParagraphsAssignment_8(), "rule__Section__ParagraphsAssignment_8");
			builder.put(grammarAccess.getSectionAccess().getTablesAssignment_9(), "rule__Section__TablesAssignment_9");
			builder.put(grammarAccess.getTableAccess().getHeaderAssignment_2(), "rule__Table__HeaderAssignment_2");
			builder.put(grammarAccess.getTableAccess().getRowsAssignment_3(), "rule__Table__RowsAssignment_3");
			builder.put(grammarAccess.getHeaderAccess().getTableHeaderDataAssignment_3(), "rule__Header__TableHeaderDataAssignment_3");
			builder.put(grammarAccess.getRowAccess().getTableRowDataAssignment_3(), "rule__Row__TableRowDataAssignment_3");
			builder.put(grammarAccess.getParagraphAccess().getColorAssignment_1_3(), "rule__Paragraph__ColorAssignment_1_3");
			builder.put(grammarAccess.getParagraphAccess().getContentAssignment_3(), "rule__Paragraph__ContentAssignment_3");
			builder.put(grammarAccess.getReferencesAccess().getLinksAssignment_3(), "rule__References__LinksAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HtmlModelGrammarAccess grammarAccess;

	@Override
	protected InternalHtmlModelParser createParser() {
		InternalHtmlModelParser result = new InternalHtmlModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HtmlModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HtmlModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
